//import email
import { Content, EmailBase } from '../facades/email'
import { EmailService } from '../email-service'

//import file system i/o api
import { existsSync, readFileSync } from 'fs'
import { SendGridResponse } from '../../../../../@types/send-grid'
import { DynamicData } from './dynamic-data'

//import sendgrid

/**
 * An email template.
 * The templates are generated by ZURB Foundation for Emails.
 * @class EmailTemplate
 */
export abstract class EmailTemplate {
    //the email dist path
    public static DIST_PATH = '../../../../../../email-templates/dist'

    //the email
    public email: EmailBase

    //the email service
    public emailService: EmailService

    //the email subject
    abstract subject: string

    //the mime type
    public type = 'text/html'

    //the contents of the template
    private _contents: Content

    //the template file name
    private _fileName: string

    private _templateId: string

    private _dynamicData: DynamicData

    /**
     * @constructor
     */
    constructor() {
        //create a new instance of the EmailService
        this.emailService = new EmailService()

        //store a reference to the Email
        this.email = this.emailService.email
    }

    /**
     * Returns the SendGridContent object for this template.
     * @method get content
     * @return {SendGridContent}
     */
    public get content(): Content {
        //return content if it already exists
        if (this._contents !== undefined) {
            return this._contents
        }

        //invoke pre-content hook
        this.pre()

        //build template file path
        const path = `${EmailTemplate.DIST_PATH}/${this.fileName}`

        //verify template file exists
        if (!existsSync(path)) {
            throw new Error(`[EmailTemplate.content] The file does not exist {path: ${path}}.`)
        }

        //read file
        const value = readFileSync(path).toString()

        //build content
        const content: Content = {
            type: this.type,
            value: value,
        }

        //invoke post-content hook
        this.post()

        return content
    }

    /**
     * Returns the file name in the DIST_PATH directory for this template.
     * @method get fileName
     * @return {string}
     */
    public get fileName(): string {
        return this._fileName
    }

    /**
     * Set the file name in the DIST_PATH directory for this template.
     * The contents of this file will be used for the email content.
     * @method set fileName
     * @param {string} fileName
     */
    public set fileName(fileName: string) {
        if (!fileName.match(/\.html$/i)) {
            fileName += '.html'
        }
        this.fileName = fileName
    }

    public get templateId(): string {
        return this._templateId
    }

    public set templateId(templateId: string) {
        this._templateId = templateId
    }    

    public set dynamicData(dynamicData: DynamicData) {
        this._dynamicData = dynamicData
    }

    public get dynamicData(): DynamicData {
        return this._dynamicData
    }

    /**
     * Post-content hook.
     * @method post
     * @abstract
     */
    abstract post()

    /**
     * Pre-content hook.
     * @method pre
     * @abstract
     */
    abstract pre()

    /**
     * Send this email template using the EmailService.
     * @method send
     * @abstract
     */
    public send(): Promise<SendGridResponse> {
        return this.emailService.populateFromTemplate(this).send()
    }
}
